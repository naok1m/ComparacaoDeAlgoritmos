╔════════════════════════════════════════════════════════════════════════════════╗
║                                                                                ║
║           SISTEMA DE COMPARAÇÃO DE ALGORITMOS DE ORDENAÇÃO                    ║
║                                                                                ║
║                  Merge Sort | Heap Sort | Quick Sort                          ║
║                                                                                ║
╚════════════════════════════════════════════════════════════════════════════════╝

🎯 BEM-VINDO AO PROJETO!

Este é um sistema completo para comparação de algoritmos de ordenação,
desenvolvido em Java usando Programação Orientada a Objetos.


📋 INÍCIO RÁPIDO (3 PASSOS)

1️⃣  COMPILE O PROJETO
   Windows:  compile.bat
   Linux/Mac: ./compile.sh

2️⃣  EXECUTE A DEMONSTRAÇÃO RÁPIDA
   Windows:  run-demo.bat
   Linux/Mac: ./run-demo.sh

3️⃣  EXECUTE O BENCHMARK COMPLETO (opcional)
   Windows:  run.bat
   Linux/Mac: ./run.sh


📚 DOCUMENTAÇÃO DISPONÍVEL

🔷 Essenciais (comece por aqui):
   • INDEX.md          - Índice completo da documentação
   • README.md         - Documentação principal do projeto
   • INSTALACAO.md     - Guia de instalação e configuração

🔷 Guias de uso:
   • USAGE.md          - Guia detalhado de uso e customização
   • EXEMPLO_SAIDA.md  - Exemplos do que o programa gera

🔷 Análise e teoria:
   • ANALISE_TEORICA.md    - Análise teórica completa dos algoritmos
   • PROJETO_COMPLETO.md   - Visão técnica completa do projeto


🎓 O QUE ESTE SISTEMA FAZ?

✅ Implementa 3 algoritmos: Merge Sort, Heap Sort, Quick Sort
✅ Testa 4 distribuições: Aleatória, Quase Ordenada, Reversa, Repetida
✅ Mede métricas: Tempo, Comparações, Trocas
✅ Gera tabelas formatadas com resultados
✅ Apresenta análise teórica e prática
✅ Fornece conclusões e recomendações


📊 ESTRUTURA DO PROJETO

AV2Algoritmos/
├── 📁 src/              Código fonte Java
│   ├── model/          Classes de dados (métricas)
│   ├── algorithms/     Algoritmos de ordenação
│   ├── generators/     Geradores de dados
│   ├── benchmark/      Sistema de medição
│   ├── analysis/       Análise e formatação
│   └── Main.java       Programa principal
│
├── 📁 bin/              Arquivos compilados (.class)
│
├── 📄 Documentação (.md) - 7 arquivos completos
└── 📜 Scripts (.bat/.sh) - Automação de compilação e execução


🚀 COMO USAR (PASSO A PASSO)

Para Iniciantes:
1. Leia INDEX.md para orientação geral
2. Siga INSTALACAO.md para configurar
3. Execute run-demo.bat para ver funcionando
4. Veja EXEMPLO_SAIDA.md para entender os resultados
5. Execute run.bat para análise completa
6. Estude ANALISE_TEORICA.md para entender a teoria

Para Desenvolvedores:
1. Leia PROJETO_COMPLETO.md para entender arquitetura
2. Veja USAGE.md para exemplos de customização
3. Modifique o código conforme necessário
4. Compile com compile.bat e teste


💡 DESTAQUES DO PROJETO

• Código modular e profissional
• Documentação completa e detalhada
• Scripts de automação incluídos
• Análise teórica fundamentada
• Resultados em tabelas formatadas
• Fácil de usar e estender
• Pronto para uso acadêmico


🔧 REQUISITOS

• Java JDK 8 ou superior
• Windows, Linux ou Mac
• Terminal/Prompt de Comando

Verifique: java -version


⚠️  PROBLEMAS COMUNS

1. "javac não é reconhecido"
   → Java não está instalado ou não está no PATH
   → Solução: Instale o JDK e configure PATH

2. "unmappable character"
   → Já resolvido nos scripts (usam -encoding UTF-8)

3. Programa lento
   → Edite Main.java e reduza ARRAY_SIZES ou REPETITIONS

4. OutOfMemoryError
   → Execute: java -Xmx2g Main


📞 ONDE ENCONTRAR AJUDA?

• INSTALACAO.md → Seção "Solução de Problemas"
• USAGE.md → Seção "Dicas de Análise"
• INDEX.md → Localização Rápida de tópicos


🎯 CONFIGURAÇÕES PADRÃO

Tamanhos testados: 1.000, 10.000, 50.000, 100.000 elementos
Repetições: 5 por cenário
Total de testes: 320 execuções (4 algoritmos × 4 distribuições × 4 tamanhos × 5 reps)
Tempo estimado: 2-5 minutos


✨ RESULTADOS GERADOS

O programa gera automaticamente:
✓ Tabela consolidada de resultados
✓ Tabelas por distribuição
✓ Resumo de tempos de execução
✓ Comparação por tamanho de array
✓ Identificação dos melhores desempenhos
✓ Análise teórica de complexidade
✓ Observações comportamentais
✓ Conclusões e recomendações


📖 LEITURA RECOMENDADA (NESTA ORDEM)

1. COMECE_AQUI.txt (você está aqui!) ✓
2. INDEX.md - Índice geral
3. README.md - Visão do projeto
4. INSTALACAO.md - Configure
5. Execute: run-demo.bat
6. EXEMPLO_SAIDA.md - Veja o que esperar
7. Execute: run.bat (benchmark completo)
8. USAGE.md - Aprenda a customizar
9. ANALISE_TEORICA.md - Estude a teoria
10. PROJETO_COMPLETO.md - Visão técnica completa


🎓 USO ACADÊMICO

Perfeito para:
• Trabalhos de Algoritmos
• Análise de complexidade
• Comparação experimental
• Estudo de estruturas de dados
• Aprendizado de POO em Java

Inclui:
• Análise teórica completa
• Resultados experimentais
• Tabelas prontas para relatórios
• Referências bibliográficas
• Código bem documentado


🏆 DIFERENCIAIS

✨ 13 classes Java bem estruturadas
✨ 7 documentos de referência
✨ 6 scripts de automação
✨ 4 algoritmos implementados
✨ 4 tipos de distribuição
✨ Análise estatística completa
✨ Código extensível e modular


═══════════════════════════════════════════════════════════════════════════════

🚀 COMECE AGORA!

Abra o terminal/prompt de comando nesta pasta e execute:

   Windows:
   C:\> compile.bat
   C:\> run-demo.bat

   Linux/Mac:
   $ chmod +x *.sh
   $ ./compile.sh
   $ ./run-demo.sh

═══════════════════════════════════════════════════════════════════════════════

Dúvidas? Leia INDEX.md ou INSTALACAO.md

Boa sorte com seu projeto! 🎓✨

═══════════════════════════════════════════════════════════════════════════════
Projeto: Sistema de Comparação de Algoritmos de Ordenação
Disciplina: Algoritmos - AV2
Versão: 1.0
Data: Outubro 2025
Status: ✅ Completo e Funcional
═══════════════════════════════════════════════════════════════════════════════

